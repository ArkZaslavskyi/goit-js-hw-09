{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SA6BA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAACH,E,MAAUC,IAEnBG,EAAO,C,SAACJ,E,MAAUC,MAEnBA,MArCSQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEzB,SAAsBC,GACpBA,EAAEC,iBAEF,MAAQZ,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAEK,OAAOC,SAEzC,IAAIC,EAAcC,OAAON,EAAMO,OAE/B,IAAK,IAAIC,EAAI,EAAGA,GAAKN,EAAOK,MAAOC,GAAK,EACtCvB,EAAcuB,EAAGH,GACdI,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA2B,OAAOC,QAAQ,uBAAqBzB,QAAiBC,UAEtDyB,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA2B,OAAOG,QAAQ,sBAAoB3B,QAAiBC,UAGxDkB,GAAeC,OAAOL,EAAKM,OAG7BT,EAAEK,OAAOW","sources":["src/js/03-promises.js"],"sourcesContent":["import {Notify} from 'notiflix';\n\nconst formRef = document.querySelector('.form');\n\nformRef.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  \n  const { delay, step, amount } = e.target.elements;\n\n  let delay_count = Number(delay.value);\n\n  for (let i = 1; i <= amount.value; i += 1) {\n    createPromise(i, delay_count)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n       })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    \n    delay_count += Number(step.value);\n  };\n  \n  e.target.reset();\n};\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay})\n      } else {\n        reject({position, delay})\n      }\n    }, delay);\n     });\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nconst makeOrder = dish => {\n  const DELAY = 1000;\n\n  return new Promise((resolve, reject) => {\n    const passed = Math.random() > 0.5;\n    \n    setTimeout(() => {\n      if (passed) {\n        resolve(`вот ваш заказ: ${dish}`);\n      };\n\n      reject('извините, закончились продукты');\n    }, DELAY);\n  });\n}\n\nmakeOrder('пирожок')\n  .then(onMakeOrderSuccess)\n  .catch(onMakeOrderError);\n*/\n/*\nconst makeOrder = dish => {\n  return Promise.resolve(`вот ваш заказ: ${dish}`);\n}\n\nmakeOrder('пирожок').then(onMakeOrderSuccess);\n\nfunction onMakeOrderSuccess(result) {\n  console.log('onMakeOrderSuccess');\n  console.log(result);\n}\n\nfunction onMakeOrderError(error) {\n  console.log('onMakeOrderError');\n  console.log(error);\n}\n*/\n\n// https://pokeapi.co/\n// fetch('https://pokeapi.co/api/v2/pokemon/1')\n//   .then(r => r.json())\n//   .then(pokemon => {\n//     console.log('блок then');\n//     console.log(pokemon);\n//   })\n//   .catch(error => {\n//     console.log('блок catch');\n//     console.log(error);\n//   });\n\n/*\nconst fetchPokemonById = id => {\n  return fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)\n    .then(r => r.json());\n};\n\nfetchPokemonById(1)\n  .then(onFetchSuccess)\n  .catch(onFetchError);\n\nfunction onFetchSuccess(pokemon) {\n  console.log('onFetchSuccess');\n  console.log(pokemon);\n}\n\nfunction onFetchError(error) {\n  console.log('onFetchError');\n  console.log(error);\n}\n*/\n\n/*\nconst makePromise = () => {\n  return new Promise((resolve, reject) => {\n    const isPassed = Math.random() > 0.5;\n\n    setTimeout(() => {\n      if (isPassed) {\n        resolve('Куку это resolve')\n      };\n\n      reject('все пропало это reject');\n    }, 1000);\n  });\n};\n\nmakePromise()\n  .then(result => console.log(result))\n  .catch(error => console.log(error));\n  */\n\n// const horses = [\n//   'Secretariat',\n//   'Eclipse',\n//   'West Australian',\n//   'Flying fox',\n//   'Seabisquit',\n// ];\n\n// console.log('%c Заезд начался, ставки не принимаются!',\n//             'color: brown; font-size: 14px;',\n// );\n\n// const promises = horses.map(run); \n// console.log(promises);\n\n// Promise.race(promises).then(({ horse, time }) => {\n//   console.log(\n//     `%c Победил ${horse}, финишировав за ${time} времени`,\n//     'color: green; font-size: 14px;',\n//   );\n// });\n\n\n// // run('Mango')\n// //   .then(x => console.log(x));\n\n\n// function run(horse) {\n//   return new Promise((resolve) => {\n//     const time = getRandomTime(2000, 3500);\n\n//     setTimeout(() => {\n//       resolve({ horse, time });\n//     }, time);\n//   });\n// };\n\n\n// function getRandomTime(min, max) {\n//   return Math.floor(Math.random() * (max - min + 1) + min);\n// };\n\n\n\n// console.log('%c Заезд окончен, принимаются ставки',\n//             'color: blue; font-size: 14px;',\n// );\n\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","delay1","step","amount","target","elements","delay_count","Number","value","i","then","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.04643dca.js.map"}